#!/usr/bin/env python


"""Run a simulation of cognate class evolution in a language family.

This module implements the CLI interface for running a very simple
forward-time phylogenetic simulation of cognate class evolution in a
language family represented by a given tree.

"""

import sys
import argparse
import csv

import newick
import networkx

from .simulate import simulate
from ..defaults import defaults, initial_weights
from ..calibration.compare_simulation_with_data import (
    read_cldf)
from .naminggame import NamingGameLanguage as Language
from .simulate import factory


def argparser(args=sys.argv):
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(description=__doc__)
    group = parser.add_argument_group("Semantic Network")
    group.add_argument(
        "--semantic-network", type=argparse.FileType('r'),
        default=None,
        help="File containing the semantic network to be used (eg. "
        "a colexification graph) in GLM format")
    group.add_argument(
        "--weight-name",
        default="FamilyWeight",
        help="Name of the weight attribute in the GML file")
    group.add_argument(
        "--min-connection",
        type=float,
        default=0,
        help="""The minimum 'weight' for a semantic network edge to be considered
        in the simulation""")
    group = parser.add_argument_group(
        "Properties of the phylogenetic simulation")

    parser.add_argument(
        "--init-wordlist",
        help="""A file containing a word list which will be used as starting
        point, instead of running 10^7 simulation steps ahead""")
    parser.add_argument(
        "--init-language",
        help="""The language ID to be taken from
            INIT_WORDLIST as starting point (default:
        The language from the last row in the file)""")
    parser.add_argument(
        "--neighbor-factor",
        type=float,
        default=0.004,
        help="Score for implicit polysemy along branches.")

    group.add_argument(
        "trees", type=argparse.FileType("r"), nargs="+",
        help="""Files containing Newick trees (one tree per line) to be
        simulated. You can specify the same tree file multiple times
        to obtain multiple simulations.""")
    group.add_argument(
        "--initial_weight",
        type=lambda x: initial_weights[x],
        default=defaults["initial_weight"],
        help="Name of the initial weight distribution")
    group.add_argument("--scale", type=float, default=defaults["scale"],
                       help="Scaling factor of the tree, or equivalently the "
                       "number of change events per unit of branchlength.")
    group.add_argument("--related-concepts-edge-weight", type=factory,
                       default=defaults["related_concepts_edge_weight"],
                       help="How the score for implicit polysemy.")
    group.add_argument('--p-loss', type=float, default=0.0,
                       help="Probability, per time step, that a word becomes "
                       "less likely for a meaning")
    group.add_argument('--p-gain', type=float, default=0.0,
                       help="Probability, per time step, that a word gains a "
                       "related meaning")
    group.add_argument(
        '--p-new', type=float, default=0.0,
        help="Probability, per time step, that a new word arises")
    group.add_argument('--quiet', action='store_true',
                       default=False,
                       help="Do not output progress")
    group.add_argument(
        "--concept-weight",
        default="degreesquared",
        choices=["one", "degree", "degreesquared", "preferential"],
        help="Use this weight function for choosing random concepts.")
    group.add_argument(
        '--wordlist', type=str, default="{tree}-{i}.tsv",
        help="""Filename to write the word lists to.  You can use the placeholders
        {tree} to get the corresponding tree file base name (without
        file ending), and {i} for the number of the simulation (starting at `1`
        for the first simulation).""")
    group.add_argument(
        "--sample-internal-nodes", action="store_true", default=False,
        help="Sample word lists also from the tree's internal nodes")

    return parser.parse_args(args)


def run_simulation_with_arguments(args):
    """Run the simulation according to the arguments in namespace `args`.

    Take a namespace as generated by the argument parser, and use it
    to run a simulation.

    """
    if args.semantic_network:
        related_concepts = networkx.parse_gml(args.semantic_network)
    else:
        related_concepts = defaults["related_concepts"]

    if args.init_wordlist is not None:
        raw_data = read_cldf(args.init_wordlist, top_word_only=False)
        init_language = args.init_language or str(
            list(raw_data["Language_ID"])[-1])
        raw_data = raw_data[
            raw_data["Language_ID"].astype(str) == init_language]
        starting_data = Language(
            related_concepts,
            related_concepts_edge_weight=args.related_concepts_edge_weight,
            generate_words=False)
        maxword = 0
        for r, row in raw_data.iterrows():
            meaning = row["Feature_ID"]
            weight = row["Weight"]
            i = row["Cognate_Set"]
            maxword = max(i, maxword)
            starting_data.words[meaning][i] = weight
        Language.max_word = maxword
    else:
        starting_data = None

    i = 0
    for _, tree_file in enumerate(args.trees):
        for tree in newick.load(tree_file):
            i += 1
            if args.wordlist == "-":
                wordlist_file = sys.stdout
            else:
                filename = args.wordlist.format(
                    tree=(tree_file.name).rsplit(".", 1)[0],
                    i=i)
                wordlist_file = open(filename, "w")
            writer = csv.writer(wordlist_file)
            writer.writerow(("ID", "Language_ID", "Feature_ID", "Value",
                             "Weight", "Cognate_Set", "Concept_CogID"))
            for dataframe in simulate(
                    tree, related_concepts,
                    initial_weight=defaults["initial_weight"],
                    concept_weight=args.concept_weight,
                    scale=args.scale,
                    related_concepts_edge_weight=factory(args.neighbor_factor),
                    p_gain=args.p_gain,
                    verbose=0 if args.quiet else 1,
                    root=starting_data,
                    tips_only=not args.sample_internal_nodes):
                writer.writerows(dataframe)


def main(args=sys.argv):
    """Parse command line arguments and run the simulation."""
    run_simulation_with_arguments(argparser(args))


if __name__ == "__main__":
    main(sys.argv[1:])
